@techreport{algebraic-effects-for-functional-programming,
author = {Leijen, Daan},
title = {Algebraic Effects for Functional Programming},
booktitle = {},
year = {2016},
month = {August},
abstract = {Algebraic effect handlers, are recently gaining in popularity as a purely functional approach to modeling effects. In this article, we give an end-to-end overview of practical algebraic effects in the context of a compiled implementation in the Koka language. In particular, we show how algebraic effects generalize over common constructs like exception handling, state, iterators and async-await. We give an effective type inference algorithm based on extensible effect rows using scoped labels, and a direct operational semantics. Finally, we show an efficient compilation scheme to common runtime platforms (such as JavaScript, the JVM, or .NET) using a type directed selective CPS translation. },
publisher = {},
url = {https://www.microsoft.com/en-us/research/publication/algebraic-effects-for-functional-programming/},
address = {},
pages = {15},
journal = {},
volume = {},
chapter = {},
isbn = {},
}


@article{intro-algebraic-effects-and-handlers,
 author = {Pretnar, Matija},
 title = {An Introduction to Algebraic Effects and Handlers. Invited Tutorial Paper},
 journal = {Electron. Notes Theor. Comput. Sci.},
 issue_date = {December 2015},
 volume = {319},
 number = {C},
 month = dec,
 year = {2015},
 issn = {1571-0661},
 pages = {19--35},
 numpages = {17},
 url = {http://dx.doi.org/10.1016/j.entcs.2015.12.003},
 doi = {10.1016/j.entcs.2015.12.003},
 acmid = {2875614},
 publisher = {Elsevier Science Publishers B. V.},
 address = {Amsterdam, The Netherlands, The Netherlands},
 keywords = {algebraic effects, effect system, handlers, logic, semantics, tutorial},
} 


@article{eff,
  author    = {Andrej Bauer and
               Matija Pretnar},
  title     = {Programming with Algebraic Effects and Handlers},
  journal   = {CoRR},
  volume    = {abs/1203.1539},
  year      = {2012},
  url       = {http://arxiv.org/abs/1203.1539},
  archivePrefix = {arXiv},
  eprint    = {1203.1539},
  timestamp = {Wed, 07 Jun 2017 14:41:26 +0200},
  biburl    = {https://dblp.org/rec/bib/journals/corr/abs-1203-1539},
  bibsource = {dblp computer science bibliography, https://dblp.org}
}

@Article{Plotkin2003,
author="Plotkin, Gordon
and Power, John",
title="Algebraic Operations and Generic Effects",
journal="Applied Categorical Structures",
year="2003",
month="Feb",
day="01",
volume="11",
number="1",
pages="69--94",
abstract="Given a complete and cocomplete symmetric monoidal closed category V and a symmetric monoidal V-category C with cotensors and a strong V-monad T on C, we investigate axioms under which an ObC-indexed family of operations of the form $\alpha$                  x                :(Tx)                  v                {\textrightarrow}(Tx)                  w                 provides semantics for algebraic operations on the computational $\lambda$-calculus. We recall a definition for which we have elsewhere given adequacy results, and we show that an enrichment of it is equivalent to a range of other possible natural definitions of algebraic operation. In particular, we define the notion of generic effect and show that to give a generic effect is equivalent to giving an algebraic operation. We further show how the usual monadic semantics of the computational $\lambda$-calculus extends uniformly to incorporate generic effects. We outline examples and non-examples and we show that our definition also enriches one for call-by-name languages with effects.",
issn="1572-9095",
doi="10.1023/A:1023064908962",
url="https://doi.org/10.1023/A:1023064908962"
}


@article{lmcs:705,
  TITLE = {{Handling Algebraic Effects}},
  AUTHOR = {Plotkin, Gordon D and Pretnar, Matija},
  URL = {https://lmcs.episciences.org/705},
  DOI = {10.2168/LMCS-9(4:23)2013},
  JOURNAL = {{Logical Methods in Computer Science}},
  VOLUME = {{Volume 9, Issue 4}},
  YEAR = {2013},
  MONTH = Dec,
  KEYWORDS = {Computer Science - Logic in Computer Science ; Computer Science - Programming Languages},
}


@INPROCEEDINGS{39155,
author={E. Moggi},
booktitle={[1989] Proceedings. Fourth Annual Symposium on Logic in Computer Science},
title={Computational lambda-calculus and monads},
year={1989},
volume={},
number={},
pages={14-23},
keywords={formal languages;formal logic;βη-conversion;λ-calculus;categorical semantics;computational lambda-calculus;equivalence of programs;mathematical tool;monads;programming languages;prove;Calculus;Computer languages;Computer science;Contracts;Logic programming;Mathematical model;Mathematical programming;Reasoning about programs},
doi={10.1109/LICS.1989.39155},
ISSN={},
month={Jun},}


@article{MOGGI91,
title = "Notions of computation and monads",
journal = "Information and Computation",
volume = "93",
number = "1",
pages = "55 - 92",
year = "1991",
note = "Selections from 1989 IEEE Symposium on Logic in Computer Science",
issn = "0890-5401",
doi = "https://doi.org/10.1016/0890-5401(91)90052-4",
url = "http://www.sciencedirect.com/science/article/pii/0890540191900524",
author = "Eugenio Moggi"
}


@InProceedings{10.1007/978-3-319-28228-2_11,
author="Vazou, Niki
and Leijen, Daan",
editor="Gavanelli, Marco
and Reppy, John",
title="From Monads to Effects and Back",
booktitle="Practical Aspects of Declarative Languages",
year="2016",
publisher="Springer International Publishing",
address="Cham",
pages="169--186",
abstract="The combination of monads and effects leads to a clean and easy to reason about programming paradigm. Monadic programming is easy to reason about, but can be cumbersome, as it requires explicit lifting and binding. In this paper, we combine monads and effects within a single programming paradigm: we use monads to define the semantics of effect types, and then, use the effects to program with those monads. We implemented an extension to the effect type system of Koka [15] with user defined effects. We use a type-directed translation to automatically lift effectful into monadic programs, by inserting bind - and unit operations.",
isbn="978-3-319-28228-2"
}


@misc{python-effect,
  author = {Christopher Armstrong},
  abstract="Effect is a library for helping you write purely functional code by isolating the effects (that is, IO or state manipulation) in your code.",
  title = {Effect},
  year = {2014},
  publisher = {GitHub},
  journal = {GitHub repository},
  howpublished = {\url{https://github.com/python-effect/effect}},
  commit = {9946975141af6220ed647baf2ca2367fe9152aaf}
}


@misc{effect-handlers,
  title={effect-handlers: A library for writing extensible algebraic effects and handlers. Similar to extensible-effects but with deep handlers.},
  author = {Andraz Bajt, Blaz Repas},
  publisher={GitHub},
  journal={Hackage},
  howpublished={\url{http://hackage.haskell.org/package/effect-handlers}},
}